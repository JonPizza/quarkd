import sys
import time
import inspect

from jonhttp.http import parse_url, build_request, parse_host, send_http11

from payloads.payloads import PAYLOADS
from payloads.verifier import verify_payload

from colors import *

if len(sys.argv) < 3:
    print(
        f'Usage\npython3 {sys.argv[0]} <exploit name> <exploit id> <optional: method> <optional: url>')

exploit = sys.argv[1]
exploit_id = int(sys.argv[2])

if len(sys.argv) == 5:
    method = sys.argv[3]
    url = sys.argv[4]
else:
    method = 'GET'
    url = 'https://example.com/'

proto, host, path = parse_url(url)
hostname, port = parse_host(proto, host)

for e in PAYLOADS:
    if e['name'] == exploit:
        payload = e['payloads'][exploit_id]
        print(payload['name'])
        responses = []
        for i, req in enumerate(payload['requests']):
            print(f' --- Request --- ')
            timeout = payload.get(
                'timeout', e.get('timeout', 10))
            req_text = build_request(method, url, e.get(
                'headers', []) + req.get('headers', []), body=req.get('body', ''))
            print(req_text.decode())
            print(' --- Response --- ')
            res = send_http11(method, url, e.get('headers', []) + req.get('headers', []), body=req.get('body', ''), timeout=timeout)
            if res == 'timeout':
                print('Timed out.')
            else:
                print(res.response_text[:100] + '...' if len(res.response_text) > 103 else res.response_text)
            responses.append(res)
        print(' --- Check function --- ')
        print(inspect.getsource(payload.get('check')).lstrip(), end='')
        if payload.get('check')(*responses):
            print(f'{GREEN}Passed.{RESET}')
        else:
            print(f'{RED}Failed.{RESET}')

        print(' --- Verification --- ')
        if verify_payload(method, url, e, payload, verbose=True):
            print(f'{GREEN}Passed.{RESET}')
        else:
            print(f'{RED}Failed.{RESET}')
